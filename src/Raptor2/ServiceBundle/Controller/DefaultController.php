<?php
/**
 * Generated with RAPTOR NEMESIS
 * You can add a route prefix to this Controller
 * puting a @Route annotation to this class.
 */

namespace Raptor2\ServiceBundle\Controller;

use Raptor\Bundle\Controller\Controller;
use Raptor2\ServiceBundle\Lib\PHP2WSDL\PHPClass2WSDL;

/**
 * @Route /raptor/services
 */
class DefaultController extends Controller{
    
    /**
     * Add your definition route and the name route[optional]
     *
     * @Route /configure
     * 
     * 
     * @param \Slim\Http\Request $request
     * @param \Slim\Http\Response $response
     * @param \Slim\Route $route
     */
    public function indexAction($request,$response,$route) {
        $confRapt= $this->app->getConfigurationLoader()->getConfOption();
        $serv=  isset($confRapt['raptor']['services'])?$confRapt['raptor']['services']:'';
        return $this->render('@ServiceBundle/configure/index.html.twig',array(
            'services'=>$serv
        ));
    }
    
    /**
     * Add your definition route and the name route[optional]
     *
     * @Route /configure/configure
     * 
     * 
     * @param \Slim\Http\Request $request
     * @param \Slim\Http\Response $response
     * @param \Slim\Route $route
     */
    public function configureAction($request,$response,$route) {
        
        $this->constructServiceFile();
        $wsdlGenerator = new PHPClass2WSDL('Raptor2\ServiceBundle\Soap\Service', $request->post('uri'));
        $wsdlGenerator->generateWSDL(FALSE);
        $actual = $wsdlGenerator->dump();
        $dirClass=__DIR__ .DIRECTORY_SEPARATOR . '..' .DIRECTORY_SEPARATOR .'Soap';
        
        file_put_contents($dirClass. DIRECTORY_SEPARATOR. 'wsdl' . DIRECTORY_SEPARATOR . 'service.wsdl', $actual);
        
        $this->app->getConfigurationLoader()->setConfOption(array('raptor'=>array('services'=>$request->post('uri'))));
        $this->app->getConfigurationLoader()->writeOptions();
        $this->app->getConfigurationLoader()->forceLoad();
            
        return $this->render('@ServiceBundle/configure/parameter.html.twig');
    }
    
    private function constructServiceFile() {
       $body='';
       $bundles= $this->app->getConfigurationLoader()->getBundlesSpecifications();
       foreach ($bundles as $key => $value) {
           $location= $value['location'];
           if (file_exists($location.DIRECTORY_SEPARATOR.'Services'.DIRECTORY_SEPARATOR.'Service.php')) {
               $ref=new \Wingu\OctopusCore\Reflection\ReflectionClass($value['namespace'].'\Services\Service');
               $body.=$ref->getBody();
           }
       }
       $body=  $this->getDeclarative().$body."
} 
?>
";
       
       $dirClass=__DIR__.'/../Soap';
       if(!file_exists($dirClass))
            mkdir($dirClass,0777, true);
       if(!file_exists($dirClass. DIRECTORY_SEPARATOR . 'wsdl'))
            mkdir($dirClass. DIRECTORY_SEPARATOR . 'wsdl');
       file_put_contents($dirClass.DIRECTORY_SEPARATOR . 'Service.php', $body);  
        
    }
    
    private function getDeclarative() {
        $class="<?php
    /**
     * This class is generated by Raptor
     * to publish your services
     */
  namespace Raptor2\ServiceBundle\Soap;
  
  class Service {
            
        ";
        return $class;
    }
    
    
}

?>
