{"name":"Raptor2","tagline":"php integration framework based on slim","body":"# Raptor 2\r\n\r\nStarting with the first change in Raptor is the removal of the old core\r\nand the use of Slim microframework in it's place. After a lot of testing\r\nwe fall in love of Slim to take the place of the core, with very documentation\r\nand periodical updates.\r\n\r\nIn the beginning we decide base the arquitecture of raptor in the Symfony\r\nproposal, reducing the congnitive charge with people that see this filosofy.\r\n\r\nWhat change? Thanks to the feedbak of all kind of developer, we figure out\r\nthat exist many factors inside of this arquitecture in particular the\r\nconfigurations methods that complicate or destroy our main gold of reducing\r\nthe conginitive charge. In Raptor 2 we remove the unnecesary configurations\r\nfiles, routes chains through configuration and in general all the things\r\nthat can be a sustancial charge to the developer.\r\n\r\nIn real terms all the routes declarations is delegated in the definitions\r\nto the controllers through annotations. Besides of grouping in it's real\r\nplace we remove all the execive configurations in the system, making easy\r\nthe task of developing. The configuration location or app is delegated\r\nto the real resposability meaning that is for global configurations only,\r\nnever interfering with the bundle logic.\r\n \r\n## Clients libreries\r\n\r\nOne of our gold is provide a full integration with the client side libreries\r\nproviding security mechanism to protect the comunications beetwen layers.\r\nRaptor include Extjs, jQuery and Angular with no need of intalled, you can\r\ncreate fully configuraded templates in every tecnology and just used with\r\nno especial action needed. The Ui generator guarantee that creation in the\r\ncorrect way.\r\nThe system give you access to functions in the front-end thanks to the \r\njavascript core always accesible through the Raptor object.\r\n\r\n## New functions and bundles\r\n\r\nThe new characteristics include the view plugins mechanisms, inyecting\r\ncode in our definitions or in the defined by Raptor. We can do a lot of\r\nthings with this, create new javascript functions inyecting them to the\r\njavascript core Raptor, inyect new functions to the Raptor panel etc.\r\n\r\nThe new instalation component guarantee in a visual way the installation\r\nand the importing of bundles from a local repository(in short time can be\r\nremote). To give support to this system we implanted the installation \r\nmanifiest concept. This concept determine the bundle state and instalations \r\ndirectives to the Raptor bundle. In this way the system implement\r\nthe automatic detection and installation of compoments, besides the removal\r\nof ghost bundles.\r\n\r\n## Installation proccess\r\n\r\nIt's real easy to run and install, download the source, uncompress in your\r\nweb server and give permissions if you are in a UNIX enviroment.\r\n\r\nAfter that you are ready to run Raptor in you localhost machine like this:\r\n\thttp://localhost/Raptor2/web/dev.php\r\n\r\nYou must run it through the dev front in order to get the development enviroment\r\n\r\nEnjoy your Raptor !! Is easy to use, faster to run and great to build apps","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}